diff --git a/src/analysisd/logtest.c b/src/analysisd/logtest.c
index d2e0b7dc1..cd4a14eca 100644
--- a/src/analysisd/logtest.c
+++ b/src/analysisd/logtest.c
@@ -68,7 +68,7 @@ int w_logtest_init_parameters() {
     w_logtest_conf.enabled = true;
     w_logtest_conf.threads = LOGTEST_THREAD;
     w_logtest_conf.max_sessions = LOGTEST_MAX_SESSIONS;
-    w_logtest_conf.session_timeout = LOGTEST_SESSION_TIMEOUT;
+    w_logtest_conf.session_timeout = 20; //LOGTEST_SESSION_TIMEOUT;
 
     if (ReadConfig(modules, OSSECCONF, NULL, NULL) < 0) {
         return OS_INVALID;
@@ -147,6 +147,11 @@ void *w_logtest_main(w_logtest_connection_t *connection) {
 
             w_logtest_add_msg_response(json_response, list_msg, &error_code);
         }
+        int i;
+        for(i = 0; i < 10; i++){
+            sleep(1);
+            printf("%s\n",current_session->token);
+        }
 
         /* Proccess log */
         if (error_code >= W_LOGTEST_RCODE_SUCCESS) {
@@ -321,6 +326,7 @@ void *w_logtest_check_inactive_sessions(__attribute__((unused)) void * arg) {
 
         hash_node = OSHash_Begin(w_logtest_sessions, &inode_it);
 
+        printf("Comienzo a limpiar\n");
         while (hash_node) {
             char *token_session;
             w_logtest_session_t *session = NULL;
@@ -328,14 +334,16 @@ void *w_logtest_check_inactive_sessions(__attribute__((unused)) void * arg) {
             token_session = hash_node->key;
             session = hash_node->data;
 
-            w_mutex_lock(&session->mutex);
+            
             current_time = time(NULL);
+            printf("busco para eliminar\n");
             if (difftime(current_time, session->last_connection) >= w_logtest_conf.session_timeout) {
-                session->expired = true;
-                w_mutex_unlock(&session->mutex);
+                printf("quiero eliminar + swtich ctx\n");
+                sleep(5);
+                printf("Elimino\n");
                 w_logtest_remove_session(token_session);
             } else {
-                w_mutex_unlock(&session->mutex);
+              printf("No elimino la session\n");
             }
 
             hash_node = OSHash_Next(w_logtest_sessions, &inode_it, hash_node);
@@ -458,14 +466,8 @@ w_logtest_session_t * w_logtest_get_session(cJSON * req, OSList * list_msg) {
     /* Search an active session */
     if (s_token) {
         if (session = OSHash_Get(w_logtest_sessions, s_token), session) {
-
-            w_mutex_lock(&session->mutex);
-            if (!session->expired) {
-                session->last_connection = time(NULL);
-                w_mutex_unlock(&session->mutex);
-                return session;
-            }
-            w_mutex_unlock(&session->mutex);
+            session->last_connection =  time(NULL);
+            return session;
         }
 
         mdebug1(LOGTEST_WARN_TOKEN_EXPIRED, s_token);
